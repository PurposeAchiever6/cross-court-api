include_reservations = include_reservations.nil? ? false : include_reservations

json = {
  id: session.id,
  start_time: session.start_time.iso8601,
  past: session.past?,
  is_private: session.is_private,
  coming_soon: session.coming_soon,
  is_open_club: session.is_open_club,
  women_only: session.women_only,
  all_skill_levels_allowed: session.all_skill_levels_allowed,
  time: session.time.iso8601,
  duration_minutes: session.duration_minutes,
  votes: session.votes(session.start_time),
  reserved: user_sessions.values_at([session.id, session.start_time]).compact.present?,
  on_waitlist: user_sessions_waitlists.values_at([session.id, session.start_time]).compact.present?,
  voted: user_sessions_votes.values_at([session.id, session.start_time]).compact.present?,
  full: session.full?(session.start_time, current_user),
  spots_left: session.spots_left(session.start_time, current_user),
  location: render(partial: 'api/v1/locations/short_info', locals: { location: session.location }),
  skill_level: render(
    partial: 'api/v1/skill_levels/info',
    locals: { skill_level: session.skill_level }
  )
}

if json[:on_waitlist]
  waitlist_index = session.waitlist(session.start_time).pending.map(&:user_id).index(user_id)
  json[:waitlist_placement] = waitlist_index + 1
end

if include_reservations
  session_users = session.not_canceled_reservations(session.start_time)
                         .includes(user: :image_attachment)
                         .order(created_at: :asc)
                         .map(&:user)

  json[:reservations] = render(partial: 'api/v1/users/short_info',
                               collection: session_users,
                               as: :user)
end

json
